program native;

uses createnative in 'createnative.pas';

{$I 'defs.inc'}

var
  Heap: Cardinal;
  
const
  REG_OPTION_NON_VOLATILE = ($00000000); 
  KEY_ALL_ACCESS = $F003F  ;
  OBJ_CASE_INSENSITIVE = $00000040; 
  REG_SZ                      = 1;
  REG_BINARY                  = 3;
  REG_DWORD                   = 4;  
  STATUS_OBJECT_NAME_NOT_FOUND = $00000002;  
  HEAP_GENERATE_EXCEPTIONS = $00000004;
  HEAP_NO_SERIALIZE  = $00000001;
  HEAP_ZERO_MEMORY = $00000008;
  
procedure ZeroMemory(Destination: Pointer; Length: Cardinal);
begin
  FillChar(Destination^, Length, 0);
end;

procedure CopyMemory(Destination: Pointer; Source: Pointer; Length: DWORD);
begin
  Move(Source^, Destination^, Length);
end;

function CompareMem(P1, P2: Pointer; Length: Integer): Boolean; assembler;
asm
        PUSH    ESI
        PUSH    EDI
        MOV     ESI,P1
        MOV     EDI,P2
        MOV     EDX,ECX
        XOR     EAX,EAX
        AND     EDX,3
        SAR     ECX,2
        JS      @@1     // Negative Length implies identity.
        REPE    CMPSD
        JNE     @@2
        MOV     ECX,EDX
        REPE    CMPSB
        JNE     @@2
@@1:    INC     EAX
@@2:    POP     EDI
        POP     ESI
end;  
	
procedure TextOut(const sText: PWideChar);
var
  StringBuffer: PWideChar;
  Text: TUNICODE_STRING;
begin
  StringBuffer := RtlAllocateHeap(Heap,HEAP_ZERO_MEMORY,256);
  swprintf( stringBuffer, #13#10'%s', sText );
  Text.pBuffer := stringBuffer;
  Text.wLength := wcslen( stringBuffer ) * sizeof(WideChar);
  Text.wMaximumLength := Text.wLength + sizeof(WideChar);
  NtDisplayString(@Text);
  RtlFreeHeap(Heap,0,StringBuffer);
end; 

function NT_SUCCESS(Status: Integer): WordBool;
begin
  Result := Status >= 0;
end; 

procedure InitializeObjectAttributes(var p: TObjectAttributes; n:
    PUNICODE_STRING; a: ULONG; r: THandle; s: PVOID);
begin
  p.Length := SizeOf(OBJECT_ATTRIBUTES);
  p.RootDirectory := r;
  p.Attributes := a;
  p.ObjectName := n;
  p.SecurityDescriptor := s;
  p.SecurityQualityOfService := nil;
end;

function MyStrToInt(const p: pwidechar): Integer;
var
str:TUNICODE_STRING ;
begin
str.pBuffer :=p;
str.wLength := wcslen(p) * SizeOf(WideChar);
RtlUnicodeStringToInteger(@str,0,@result);
end;

Function PWideChartoBinary(pw:pwidechar;bin:pointer):boolean;
var
i,j:integer;
p:pointer;
pw2:array[0..3] of widechar;
begin
p:=bin;
pw2[0]:='0';pw2[1]:='x';
while pw^<>#0 do
  begin
  pw2[2]:=pw^;
  inc(pw);pw2[3]:=pw^;
  j:=MyStrToInt(pw2);
  copymemory(p,@j,1);
  inc(pbyte(p));
  inc(pw);
  end;
end;

//fillchar, setlength : not workings
function split2(const texto:pwidechar;const delimiter:widechar):tsarray2;
var i,j:integer;
p:pwidechar;
begin
//textout('Split:BEGIN');
j:=0;
//SetLength(Result, 1);
result[j]:=RtlAllocateHeap(Heap,HEAP_ZERO_MEMORY,256);
p:=result[j];
for i:=0 to wcslen(texto)-1 do
  begin
  if texto[i]<>delimiter
    then
    begin
    p^:=texto[i];
	inc(p);
    end
    else
    begin
    inc(j);
	result[j]:=RtlAllocateHeap(Heap,HEAP_ZERO_MEMORY,256);
	p:=result[j];
    //SetLength(Result, j + 1);
    end;
  end;
//textout('Split:END');    
end;

procedure DeleteValue(const mainkey,valuekey:pwidechar);
var
KeyName,valuename: TUNICODE_STRING;
ObjectAttributes: OBJECT_ATTRIBUTES;
Status: ULONG;
mainKeyHandle: THandle;
begin
//textout('DeleteValue:BEGIN');

// Open the Software key
   KeyName.pBuffer := (mainkey);
   KeyName.wLength := wcslen(mainkey) * SizeOf(WideChar);
   InitializeObjectAttributes(ObjectAttributes, @KeyName, OBJ_CASE_INSENSITIVE,0, nil);
   status := NtOpenKey(mainKeyHandle, KEY_ALL_ACCESS , ObjectAttributes);
   if not NT_SUCCESS(Status) then
	  begin
      textout('Error: Could not open key');
	    exit;
	  end;
//
ValueName.pBuffer := (valuekey);
ValueName.wLength := wcslen(valuekey) * SizeOf(WideChar);
status:=NtDeleteValueKey(mainKeyHandle,@valuename);
if not NT_SUCCESS(Status) then
      begin
	  textout('Error: Could not delete value');
      end;
//
textout('DeleteValue:DONE');
end;

procedure DeleteKey(const mainkey:pwidechar);
var
KeyName: TUNICODE_STRING;
ObjectAttributes: OBJECT_ATTRIBUTES;
Status: ULONG;
mainKeyHandle: THandle;
//Disposition: ULONG;
begin
//textout('DeleteKey:BEGIN');
  
// Open the Software key
   KeyName.pBuffer := (mainkey);
   KeyName.wLength := wcslen(mainkey) * SizeOf(WideChar); //or RtlInitUnicodeString(@KeyName,mainkey); ?
   InitializeObjectAttributes(ObjectAttributes, @KeyName, OBJ_CASE_INSENSITIVE,0, nil);
   status := NtOpenKey(mainKeyHandle, KEY_ALL_ACCESS , ObjectAttributes);
   //status:=NtCreateKey(mainKeyHandle,KEY_ALL_ACCESS,ObjectAttributes,0,nil,REG_OPTION_NON_VOLATILE,Disposition);
   if not NT_SUCCESS(Status) then
	  begin
      textout('Error: Could not open key');
	  exit;
	  end;
//
status:=NtDeleteKey(mainKeyHandle);
if not NT_SUCCESS(Status) then
      begin
	  textout('Error: Could not delete key');
      end;

//
textout('DeleteKey:DONE');
end;

procedure CreateKey(const mainkey,newkey:pwidechar);
var
   KeyName: TUNICODE_STRING;
   mainKeyHandle, newKeyHandle: THandle;
   Status: ULONG;
   ObjectAttributes: OBJECT_ATTRIBUTES;
   Disposition: ULONG;
begin
  //textout('CreateKey:BEGIN');

   // Open the Software key
   KeyName.pBuffer := (mainkey);
   KeyName.wLength := wcslen(mainkey) * SizeOf(WideChar);
   InitializeObjectAttributes(ObjectAttributes, @KeyName, OBJ_CASE_INSENSITIVE,0, nil);
   status := NtOpenKey(mainKeyHandle, KEY_ALL_ACCESS , ObjectAttributes);
   if not NT_SUCCESS(Status) then
	  begin
      textout('Error: Could not open HKLM\system');
	  exit;
	  end;

	//create key
   KeyName.pBuffer := (newkey);
   KeyName.wLength := wcslen(newkey) * SizeOf(WideChar);
   InitializeObjectAttributes(ObjectAttributes, @KeyName, OBJ_CASE_INSENSITIVE,mainKeyHandle, nil);
   Status := NtCreateKey(newKeyHandle, KEY_ALL_ACCESS, ObjectAttributes, 0,nil, REG_OPTION_NON_VOLATILE, Disposition);
   if not NT_SUCCESS(Status) then
      begin
	  textout('Error: Could not create key');
      end;

NtClose(mainKeyHandle);

textout('CreateKey:DONE');

end;

function get_random(lo,up:integer):ulong;
var
l,r:ulong;
begin
l:=1;
r:=RtlRandomEx(@l);
r:=r mod (up-lo) + lo;
result:=r;
end;

procedure random_string(pw:pwidechar;len:integer);
var
i:byte;
a:array[0..255] of widechar;
r:ulong;
begin
fillchar(a,sizeof(a),0);
for i := 0 to len-1 do
  begin
    r:=get_random(65,91); 
    a[i]:=widechar(chr(r));
  end;
copymemory(pw,@a[0],len*sizeof(widechar));
end;

procedure CreateValue(const mainkey,newvaluename,newvalue,value_type:pwidechar);
const
pwreg_sz:pwidechar='REG_SZ';
pwreg_sz_rnd:pwidechar='REG_RND_SZ';
pwreg_dword:pwidechar='REG_DWORD';
pwreg_binary:pwidechar='REG_BINARY';
var
   KeyName, ValueName: TUNICODE_STRING;
   mainKeyHandle: THandle;
   Status: ULONG;
   ObjectAttributes: OBJECT_ATTRIBUTES;
   value:integer;
   bin:array[0..511] of byte;
   StringRnd:pwidechar;
begin
  //textout('CreateValue:BEGIN');

   // Open the Software key
   KeyName.pBuffer := (mainkey);
   KeyName.wLength := wcslen(mainkey) * SizeOf(WideChar);
   InitializeObjectAttributes(ObjectAttributes, @KeyName, OBJ_CASE_INSENSITIVE,0, nil);
   status := NtOpenKey(mainKeyHandle, KEY_ALL_ACCESS , ObjectAttributes);
   if not NT_SUCCESS(Status) then
	  begin
      textout('Error: Could not open key');
	    exit;
	  end;

   //SZ_RND
   if comparemem(value_type,pwreg_sz_rnd,wcslen(pwreg_sz_rnd)*sizeof(widechar)) then
   begin
   ValueName.pBuffer := (newvaluename);
   ValueName.wLength := wcslen(newvaluename) * SizeOf(WideChar);
   value:=MyStrToInt(newvalue);
   StringRnd := RtlAllocateHeap(Heap,HEAP_ZERO_MEMORY,256);
   random_string(StringRnd,value);
   Status := NtSetValueKey(mainKeyHandle, @ValueName, 0, REG_SZ, StringRnd, value * SizeOf(WideChar));
   if not NT_SUCCESS(Status) then
      begin
      textout('Error: Could not create value');
      end;
   end;   
   
   //SZ
   if comparemem(value_type,pwreg_sz,wcslen(pwreg_sz)*sizeof(widechar)) then
   begin
   ValueName.pBuffer := (newvaluename);
   ValueName.wLength := wcslen(newvaluename) * SizeOf(WideChar);
   Status := NtSetValueKey(mainKeyHandle, @ValueName, 0, REG_SZ, pwidechar(newvalue), wcslen(newvalue) * SizeOf(WideChar));
   if not NT_SUCCESS(Status) then
      begin
      textout('Error: Could not create value');
      end;
   end;
		
   //DWORD
   if comparemem(value_type,pwreg_dword,wcslen(pwreg_dword)*sizeof(widechar)) then
   begin
   ValueName.pBuffer := (newvaluename);
   ValueName.wLength := wcslen(newvaluename) * SizeOf(WideChar);
   value:=MyStrToInt(newvalue);
   Status := NtSetValueKey(mainKeyHandle, @ValueName, 0, REG_DWORD , @value, SizeOf(dword));
   if not NT_SUCCESS(Status) then
      begin
      textout('Error: Could not create value');
      end;
   end;
   
   //BINARY
   if comparemem(value_type,pwreg_binary ,wcslen(pwreg_binary)*sizeof(widechar)) then
   begin
   ValueName.pBuffer := (newvaluename);
   ValueName.wLength := wcslen(newvaluename) * SizeOf(WideChar);
   //newvalue->bin
   fillchar(bin,sizeof(bin),0);
   PWideChartoBinary(newvalue,@bin[0]);
   Status := NtSetValueKey(mainKeyHandle, @ValueName, 0, REG_BINARY , @bin[0], wcslen(newvalue) div 2 );
   if not NT_SUCCESS(Status) then
      begin
      textout('Error: Could not create value');
      end;
   end;

NtClose(mainKeyHandle);

textout('CreateValue:DONE');

end;

//procedure NtProcessStartup( Argument: PSTARTUP_ARGUMENT ); stdcall;
procedure NtProcessStartup( Peb: PPeb32 ); stdcall;
const
pwcreatekey:pwidechar='createkey';
pwcreatevalue:pwidechar='createvalue';
pwdeletekey:pwidechar='deletekey';
pwdeletevalue:pwidechar='deletevalue';
var
  //commandLine: PUNICODE_STRING;
  argPtr: PWideChar;
  heapParams: TRTL_HEAP_DEFINITION;
  interval: int64;
  ts:tsarray2;
  b:byte;
  i:integer;
begin
    // Initialize some heap
    ZeroMemory( @heapParams, sizeof( TRTL_HEAP_DEFINITION ));
    heapParams.Length := sizeof( TRTL_HEAP_DEFINITION );
    Heap := RtlCreateHeap( 2, nil, $100000, $1000, False, @heapParams );

	TextOut('NativeReg 0.4 by erwan2212@gmail.com');
	
    //WCHAR* CommandLine = pPeb->ProcessParameters->CommandLine.Buffer; 
    //also display string 
    //NtDisplayString(&pPeb->ProcessParameters-CommandLine); 
	argPtr :=peb^.ProcessParameters^.commandLine.pBuffer;
	
	// Print out the argument
    //TextOut(argPtr);
	ts:=split2(argPtr,' ');	
	textout(ts[1]);
	textout(ts[2]);
	if ts[3]<>nil then textout(ts[3]);
	if ts[4]<>nil then textout(ts[4]);
	if ts[5]<>nil then textout(ts[5]);
	if comparemem(ts[1],pwcreatekey,wcslen(pwcreatekey)*sizeof(widechar)) then createkey(ts[2],ts[3]);
	if comparemem(ts[1],pwdeletekey,wcslen(pwdeletekey)*sizeof(widechar)) then deletekey(ts[2]);
	if comparemem(ts[1],pwdeletevalue,wcslen(pwdeletevalue)*sizeof(widechar)) then deletevalue(ts[2],ts[3]);
	if comparemem(ts[1],pwcreatevalue,wcslen(pwcreatevalue)*sizeof(widechar)) then createvalue(ts[2],ts[3],ts[4],ts[5]);
	//createkey('\Registry\Machine\SYSTEM\Setup','native');
	//createvalue('\Registry\Machine\SYSTEM\Setup\native','test','toto','REG_SZ');
	//createvalue('\Registry\Machine\SYSTEM\Setup\native','test','666','REG_DWORD');
	//DeleteKey('\Registry\Machine\SYSTEM\Setup\key3');
	//
	interval:= - 5000 * 10000;
	NtDelayExecution(false,@interval);
    //
	//
    // Terminate
    //
    NtTerminateProcess(Cardinal(-1), 0);
end;


exports
  NtProcessStartup;

begin

end.